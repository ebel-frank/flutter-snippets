{
  "Scaffold widget snippet": {
    "prefix": "fscaf",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('${1:Title}'),",
      "  ),",
      "  body: ${2:Container()}${0},",
      ");"
    ],
    "description": "Scaffold widget snippet"
  },
  "Expand widget snippet": {
    "prefix": "fex",
    "body": [
      "Expanded(",
      "  child: ${1:Widget},${0}",
      ")"
    ],
    "description": "Expand widget snippet"
  },
  "Text widget snippet": {
    "prefix": "ftxt",
    "body": [
      "Text('${1:text}'),${0}"
    ],
    "description": "Text widget snippet"
  },
  "Flutter Icon widget snippet": {
    "prefix": "fic",
    "body": [
      "Icon(Icons.${1:clear})${0}"
    ],
    "description": "Flutter Icon widget snippet"
  },
  "Flutter Container widget snippet": {
    "prefix": "fcont",
    "body": [
      "Container(",
      "  child: ${1}",
      ")"
    ],
    "description": "Flutter Container widget snippet"
  },
  "Flutter Center widget snippet": {
    "prefix": "fcent",
    "body": [
      "Center(",
      "  child: ${1:Widget}(${0}),",
      ")"
    ],
    "description": "Flutter Center widget snippet"
  },
  "Flutter Row widget snippet": {
    "prefix": "frow",
    "body": [
      "Row(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Row widget snippet"
  },
  "Flutter Column widget snippet": {
    "prefix": "fcol",
    "body": [
      "Column(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Column widget snippet"
  },
  "Flutter Stack widget snippet": {
    "prefix": "fstk",
    "body": [
      "Stack(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Stack widget snippet"
  },
  "Align widget": {
    "prefix": "falign",
    "body": [
      "Align(",
      "  alignment: Alignment${1},",
      "  child:${2:Widget}",
      "  ),"
    ],
    "description": "Align widget"
  },
  "Textbutton widget": {
    "prefix": "ftextbtn",
    "body": [
      "TextButton(",
      "  onPressed: () {${1}},",
      "  child: Text(",
      "    \"${2:Text Button}\",",
      "  ),",
      "),"
    ],
    "description": "Textbutton widget"
  },
  "FloatingActionButton widget": {
    "prefix": "fab",
    "body": [
      "FloatingActionButton(",
      "  onPressed: () {${1}},",
      "  child: Icon(Icons.${2:add}),",
      "),"
    ],
    "description": "FloatingActionButton widget"
  },
  "IconButton widget": {
    "prefix": "ficbtn",
    "body": [
      "IconButton(",
      "  onPressed: () {${1}},",
      "  icon: Icon(Icons.${2:add}),",
      "),"
    ],
    "description": "IconButton widget"
  },
  "ElevatedButton widget": {
    "prefix": "felevbtn",
    "body": [
      "ElevatedButton(",
      "  onPressed: () {${1}},",
      "  child: Text(",
      "    \"${2:Elevated Button}\",",
      "  ),",
      ")"
    ],
    "description": "ElevatedButton widget"
  },
  "GestureDetector widget": {
    "prefix": "fgesdet",
    "body": [
      "GestureDetector(",
      "  onTap: () {${1}},",
      "  child: ${2:Widget},",
      "),"
    ],
    "description": "GestureDetector widget"
  },
  "InkWell widget": {
    "prefix": "fink",
    "body": [
      "InkWell(",
      "  onTap: () {${1}},",
      "  child:${2:Widget}",
      "),"
    ],
    "description": "RaisedButton widget"
  },
  "Drawer widget": {
    "prefix": "fdrawer",
    "body": [
      "Drawer(",
      "  child: ListView(",
      "    children: const <Widget>[${0}],",
      "),  "
    ],
    "description": "Drawer widget"
  },
  "MediaQuery widget": {
    "prefix": "fmeque",
    "body": [
      "MediaQuery.of(context).${0};"
    ],
    "description": "MediaQuery widget"
  },
  "Material Package": {
    "prefix": "impM",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import flutter material package"
  },
  "Cupertino Package": {
    "prefix": "impC",
    "body": "import 'package:flutter/cupertino.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "Services Package": {
    "prefix": "impS",
    "body": "import 'package:flutter/services.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "Foundation Package": {
    "prefix": "impF",
    "body": "import 'package:flutter/foundation.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "HTTP Package": {
    "prefix": "impH",
    "body": "import 'package:http/http.dart'as http;",
    "description": "Import Flutter HTTP package"
  },
  "Creates a screen with text in center": {
    "prefix": "screen",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:Screen} extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('${1:App Bar}'),",
      "      ),",
      "      body: Center(",
      "        child: Container(",
      "          child: Text('${1:Hello World}'),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a screen with text in center"
  },
  "Device Preview": {
    "prefix": "devprev",
    "body": [
      "import 'package:device_preview/device_preview.dart';",
      "import 'package:flutter/foundation.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(",
      "      DevicePreview(",
      "        enabled: !kReleaseMode,",
      "        builder: (context) => MyApp(), // Wrap your app",
      "      ),",
      "    );",
      "",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "        debugShowCheckedModeBanner: false,",
      "        builder: DevicePreview.appBuilder,",
      "        title: 'Flutter Demo',",
      "        theme: ThemeData(",
      "          primarySwatch: Colors.blue,",
      "        ),",
      "        home: ${1:HomePage()},",
      "    );",
      "  }",
      "}"
    ],
    "description": "Device Preview"
  },
  "Material App": {
    "prefix": "mateapp",
    "description": "Create a MaterialApp",
    "body": [
      "import 'package:flutter/material.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Material App',",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: Text('Material App Bar'),",
      "        ),",
      "        body: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "description": "Create a CupertinoApp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Used for creating custom shapes"
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "Theme of context": {
    "prefix": "ftheme",
    "body": [
      "Theme.of(context).${0}"
    ],
    "description": "Theme of context"
  },
  "CrossAxisAlignment": {
    "prefix": "caa",
    "body": [
      "crossAxisAlignment : CrossAxisAlignment.${0},"
    ],
    "description": "CrossAxisAlignment"
  },
  "MainAxisAlignment": {
    "prefix": "maa",
    "body": [
      "mainAxisAlignment : MainAxisAlignment.${1},"
    ],
    "description": "MainAxisAlignment"
  },
  "Flutter Logo": {
    "prefix": "flogo",
    "body": [
      "FlutterLogo(),"
    ],
    "description": "Flutter Logo"
  },
  "SizedBox Widget": {
    "prefix": "fszb",
    "body": [
      "SizedBox(),"
    ],
    "description": "Sized Box Widget"
  },
  "SizedBox Widget with width": {
    "prefix": "fszbw",
    "body": [
      "SizedBox(width:${0}),"
    ],
    "description": "SizedBox Widget with width"
  },
  "SizedBox Widget with height": {
    "prefix": "fszbh",
    "body": [
      "SizedBox(height:${0}),"
    ],
    "description": "SizedBox Widget with height"
  },
  "ListView Widget": {
    "prefix": "flistv",
    "body": [
      "ListView(",
      "children: <Widget>[${0}],",
      ")"
    ],
    "description": "ListView Widget"
  },
  "Navigation widget": {
    "prefix": "fnav",
    "body": [
      "Navigator.push(",
      " context,",
      " MaterialPageRoute(builder: (context) => ${1}),",
      " );"
    ],
    "description": "Flutter Navigation widget"
  },
  "Custom AppBar widget": {
    "prefix": "appbar",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:AppBarScreen} extends StatelessWidget with PreferredSizeWidget {",
      "  final Size preferredSize;",
      "",
      "  ${1:AppBarScreen}() : preferredSize = Size.fromHeight(56.0);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return AppBar(",
      "      title: Text(",
      "        '${2:AppBarScreen}',",
      "      ),",
      "      leading: IconButton(",
      "        icon: Icon(Icons.arrow_back_ios),",
      "        onPressed: () => Navigator.of(context).pop(),",
      "      ),",
      "      automaticallyImplyLeading: true,",
      "    );",
      "  }",
      "}"
    ],
    "description": "Custom AppBar widget"
  },
  "Default Counter App ": {
    "prefix": "defaultApp",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(MyApp());",
      "}",
      "",
      "class MyApp extends StatelessWidget {",
      "  // This widget is the root of your application.",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Flutter Demo',",
      "      theme: ThemeData(",
      "        // This is the theme of your application.",
      "        //",
      "        // Try running your application with \"flutter run\". You'll see the",
      "        // application has a blue toolbar. Then, without quitting the app, try",
      "        // changing the primarySwatch below to Colors.green and then invoke",
      "        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",",
      "        // or simply save your changes to \"hot reload\" in a Flutter IDE).",
      "        // Notice that the counter didn't reset back to zero; the application",
      "        // is not restarted.",
      "        primarySwatch: Colors.blue,",
      "      ),",
      "      home: MyHomePage(title: 'Flutter Demo Home Page'),",
      "    );",
      "  }",
      "}",
      "",
      "class MyHomePage extends StatefulWidget {",
      "  MyHomePage({Key? key, required this.title}) : super(key: key);",
      "",
      "  // This widget is the home page of your application. It is stateful, meaning",
      "  // that it has a State object (defined below) that contains fields that affect",
      "  // how it looks.",
      "",
      "  // This class is the configuration for the state. It holds the values (in this",
      "  // case the title) provided by the parent (in this case the App widget) and",
      "  // used by the build method of the State. Fields in a Widget subclass are",
      "  // always marked \"final\".",
      "",
      "  final String title;",
      "",
      "  @override",
      "  _MyHomePageState createState() => _MyHomePageState();",
      "}",
      "",
      "class _MyHomePageState extends State<MyHomePage> {",
      "  int _counter = 0;",
      "",
      "  void _incrementCounter() {",
      "    setState(() {",
      "      // This call to setState tells the Flutter framework that something has",
      "      // changed in this State, which causes it to rerun the build method below",
      "      // so that the display can reflect the updated values. If we changed",
      "      // _counter without calling setState(), then the build method would not be",
      "      // called again, and so nothing would appear to happen.",
      "      _counter++;",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    // This method is rerun every time setState is called, for instance as done",
      "    // by the _incrementCounter method above.",
      "    //",
      "    // The Flutter framework has been optimized to make rerunning build methods",
      "    // fast, so that you can just rebuild anything that needs updating rather",
      "    // than having to individually change instances of widgets.",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        // Here we take the value from the MyHomePage object that was created by",
      "        // the App.build method, and use it to set our appbar title.",
      "        title: Text(widget.title),",
      "      ),",
      "      body: Center(",
      "        // Center is a layout widget. It takes a single child and positions it",
      "        // in the middle of the parent.",
      "        child: Column(",
      "          // Column is also a layout widget. It takes a list of children and",
      "          // arranges them vertically. By default, it sizes itself to fit its",
      "          // children horizontally, and tries to be as tall as its parent.",
      "          //",
      "          // Invoke \"debug painting\" (press \"p\" in the console, choose the",
      "          // \"Toggle Debug Paint\" action from the Flutter Inspector in Android",
      "          // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)",
      "          // to see the wireframe for each widget.",
      "          //",
      "          // Column has various properties to control how it sizes itself and",
      "          // how it positions its children. Here we use mainAxisAlignment to",
      "          // center the children vertically; the main axis here is the vertical",
      "          // axis because Columns are vertical (the cross axis would be",
      "          // horizontal).",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            Text(",
      "              'You have pushed the button this many times:',",
      "            ),",
      "            Text(",
      "              '$_counter',",
      "              style: Theme.of(context).textTheme.headline4,",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "      floatingActionButton: FloatingActionButton(",
      "        onPressed: _incrementCounter,",
      "        tooltip: 'Increment',",
      "        child: Icon(Icons.add),",
      "      ), // This trailing comma makes auto-formatting nicer for build methods.",
      "    );",
      "  }",
      "}"
    ],
    "description": "Default Counter App "
  },
  "Flutter TextStyle property": {
    "prefix": "fstyle",
    "body": [
      "style: TextStyle($0),"
    ],
    "description": "Flutter TextStyle property"
  }
}